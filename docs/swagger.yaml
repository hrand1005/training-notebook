basePath: /
consumes:
- application/json
definitions:
  H:
    additionalProperties:
      type: object
    description: H is a shortcut for map[string]interface{}
    type: object
    x-go-package: github.com/gin-gonic/gin
  Set:
    description: Set is the model representation of a sets resource
    properties:
      id:
        $ref: '#/definitions/SetID'
      intensity:
        format: double
        type: number
        x-go-name: Intensity
      movement:
        type: string
        x-go-name: Movement
      volume:
        format: double
        type: number
        x-go-name: Volume
    required:
    - set-id
    - id
    type: object
    x-go-package: github.com/hrand1005/training-notebook/data/set
  SetID:
    description: SetID is the unique int identifier assigned to sets when added to
      the SetDB
    format: int64
    type: integer
    x-go-package: github.com/hrand1005/training-notebook/data/set
  UserID:
    description: UserID is the unique identifier for a user of the application
    format: int64
    type: integer
    x-go-package: github.com/hrand1005/training-notebook/models
info:
  description: Documentation for Set API
  title: of Set API
  version: 1.0.0
paths:
  /sets:
    get:
      operationId: readAllSets
      responses:
        "200":
          $ref: '#/responses/setsResponse'
        "401":
          $ref: '#/responses/errorResponse'
        "500":
          $ref: '#/responses/errorResponse'
      summary: Read all sets.
      tags:
      - sets
    post:
      operationId: createSet
      responses:
        "201":
          $ref: '#/responses/setResponse'
        "400":
          $ref: '#/responses/errorResponse'
        "401":
          $ref: '#/responses/errorResponse'
        "500":
          $ref: '#/responses/errorResponse'
      summary: Creates a set.
      tags:
      - sets
  /sets/{id}:
    delete:
      operationId: deleteSet
      parameters:
      - description: The id of the set
        format: int64
        in: query
        name: set-id
        required: true
        type: integer
        x-go-name: ID
      responses:
        "204":
          $ref: '#/responses/noContent'
        "401":
          $ref: '#/responses/errorResponse'
        "404":
          $ref: '#/responses/errorResponse'
        "500":
          $ref: '#/responses/errorResponse'
      summary: Delete a set.
      tags:
      - sets
    get:
      operationId: readSet
      parameters:
      - description: The id of the set
        format: int64
        in: query
        name: set-id
        required: true
        type: integer
        x-go-name: ID
      responses:
        "200":
          $ref: '#/responses/setResponse'
        "400":
          $ref: '#/responses/errorResponse'
        "401":
          $ref: '#/responses/errorResponse'
        "404":
          $ref: '#/responses/errorResponse'
        "500":
          $ref: '#/responses/errorResponse'
      summary: Read a set.
      tags:
      - sets
    put:
      operationId: updateSet
      parameters:
      - description: The id of the set
        format: int64
        in: query
        name: set-id
        required: true
        type: integer
        x-go-name: ID
      responses:
        "200":
          $ref: '#/responses/setResponse'
        "400":
          $ref: '#/responses/errorResponse'
        "401":
          $ref: '#/responses/errorResponse'
        "404":
          $ref: '#/responses/errorResponse'
        "500":
          $ref: '#/responses/errorResponse'
      summary: Update a set.
      tags:
      - sets
  /users:
    get:
      operationId: readAllUsers
      responses:
        "200":
          $ref: '#/responses/usersResponse'
        "500":
          $ref: '#/responses/errorResponse'
      summary: Read all users.
      tags:
      - users
    post:
      operationId: createUser
      responses:
        "201":
          $ref: '#/responses/userResponse'
        "400":
          $ref: '#/responses/errorResponse'
        "500":
          $ref: '#/responses/errorResponse'
      summary: Creates a user.
      tags:
      - users
  /users/{id}:
    delete:
      operationId: deleteuser
      responses:
        "204":
          $ref: '#/responses/noContent'
        "404":
          $ref: '#/responses/errorResponse'
        "500":
          $ref: '#/responses/errorResponse'
      summary: Delete a user.
      tags:
      - users
    get:
      operationId: readUser
      responses:
        "200":
          $ref: '#/responses/userResponse'
        "400":
          $ref: '#/responses/errorResponse'
        "404":
          $ref: '#/responses/errorResponse'
        "500":
          $ref: '#/responses/errorResponse'
      summary: Read a user.
      tags:
      - users
    put:
      operationId: updateUser
      responses:
        "200":
          $ref: '#/responses/userResponse'
        "400":
          $ref: '#/responses/errorResponse'
        "404":
          $ref: '#/responses/errorResponse'
        "500":
          $ref: '#/responses/errorResponse'
      summary: Update a user.
      tags:
      - users
produces:
- application/json
responses:
  errorResponse:
    description: returns generic error message as string
    schema:
      $ref: '#/definitions/H'
  setResponse:
    description: returns a set in the response
    schema:
      $ref: '#/definitions/Set'
  setsResponse:
    description: returns sets in the response
    schema:
      items:
        $ref: '#/definitions/Set'
      type: array
schemes:
- http
swagger: "2.0"
